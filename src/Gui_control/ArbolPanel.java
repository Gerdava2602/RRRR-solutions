/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Gui_control;

import Nodos.Arbol;
import Nodos.Comentario;
import Nodos.Nodo;
import Nodos.Publicacion;
import Nodos.Usuario;
import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.LinkedList;
import javax.swing.JFrame;

/**
 *
 * @author German David
 */
public class ArbolPanel extends javax.swing.JFrame {

    JFrame blog;
    Arbol a;
    Graphics g;
    
    ArbolPanel(JFrame blog, Arbol a) {
        initComponents();
        this.setResizable(false);
        this.a = a;
        g= panel.getGraphics();
    }

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1017, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 614, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(49, Short.MAX_VALUE)
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panel;
    // End of variables declaration//GEN-END:variables

    public void setA(Arbol a) {
        this.a = a;
    }
    
    public void paintTree(Arbol tree){
        int width = panel.getWidth();
        int height = panel.getHeight();
        int  userSize = tree.Raiz.getUsuarios().size(); 
        int[] counts = new int[3];
        int[] ux = new int[3];
        int uy = height/4;
        
        g.drawOval(width/2, 10, 20, 20);
        for (Usuario usuario : tree.Raiz.getUsuarios()) {
            counts[0]++;
            if(counts[0]==1)
                ux[0] = width/(userSize*2)*counts[0];
            else
                ux[0] = ux[0]+ width/(userSize);
            
            g.drawLine(width/2+10, 10, ux[0]+10, uy+10);
            g.drawRect(ux[0], uy, 20, 20);
            for (Publicacion post : usuario.getPosts()) {
                int postSize = usuario.getPosts().size();
                counts[1]++;
                if(counts[1]==0)
                    ux[1] = width/userSize/postSize*counts[1];
                else
                    ux[1] = ux[1] + width/userSize/postSize;
                g.drawLine(ux[0]+10, uy+10, ux[1]+10, uy*2+10);
                g.drawRect(ux[1], uy*2, 20, 20);
                for (Comentario comment : post.getComments()) {
                    int commentSize = post.getComments().size();
                    counts[2]++;
                    if(counts[2]==1)
                        ux[2] = 0;
                    else
                        ux[2] = ux[2] + width/userSize/postSize;
                    
                    g.drawLine(ux[1]+10, uy*2+10,10+ ux[2], 10+ uy*3);
                    g.drawRect(ux[2], uy*3, 20, 20);
                }
                counts[2] = 0;
                
            }
            counts[1] = 0;
        }
    }
    
}
